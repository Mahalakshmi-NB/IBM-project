# -*- coding: utf-8 -*-
"""Health_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hA6aC7FrItdnL7hpg4WgfQ20VebR9ZOr
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import os

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# Disease Prediction Function
def disease_prediction(symptoms, severity):
    prompt = (
        f"Analyze the following symptoms with severity level '{severity}'. "
        f"List possible medical conditions, general recommendations, and warnings. "
        f"Always emphasize consulting a doctor.\n\n"
        f"Symptoms: {symptoms}\n\n"
        f"**DISCLAIMER: Informational purposes only. Consult healthcare professional.**\n\nAnalysis:"
    )
    return generate_response(prompt, max_length=1200)

# Treatment Plan Function
def treatment_plan(condition, age, gender, medical_history):
    prompt = (
        f"Provide a detailed personalized treatment plan for this patient. "
        f"Include lifestyle tips, home remedies, general medication suggestions, and precautions.\n\n"
        f"Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\n"
        f"**DISCLAIMER: Informational purposes only. Consult a healthcare professional.**\n\nTreatment Plan:"
    )
    return generate_response(prompt, max_length=1200)

# Lifestyle Tips Generator
def lifestyle_tips(condition):
    prompt = f"Provide lifestyle tips for someone diagnosed with {condition}. Keep it short, actionable, and safe."
    return generate_response(prompt, max_length=300)

# Gradio UI
with gr.Blocks() as app:
    gr.Markdown("# üè• Medical AI Assistant")
    gr.Markdown("**Disclaimer: This tool provides general information only. Always consult a licensed healthcare professional for diagnosis or treatment.**")

    with gr.Tabs():
        # Disease Prediction Tab
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(label="Enter Symptoms", placeholder="e.g., fever, headache, cough", lines=4)
                    severity_input = gr.Dropdown(label="Symptom Severity", choices=["Mild", "Moderate", "Severe"], value="Moderate")
                    predict_btn = gr.Button("Analyze Symptoms")
                with gr.Column():
                    prediction_output = gr.Textbox(label="Analysis & Possible Conditions", lines=20)
            predict_btn.click(disease_prediction, inputs=[symptoms_input, severity_input], outputs=prediction_output)

        # Treatment Plans Tab
        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(label="Medical Condition", placeholder="e.g., diabetes, migraine", lines=2)
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(choices=["Male", "Female", "Other"], label="Gender", value="Male")
                    history_input = gr.Textbox(label="Medical History", placeholder="Previous conditions, allergies, medications or None", lines=3)
                    plan_btn = gr.Button("Generate Treatment Plan")
                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)
                    tips_btn = gr.Button("Get Lifestyle Tips")
                    tips_output = gr.Textbox(label="Lifestyle & Wellness Tips", lines=10)
            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)
            tips_btn.click(lifestyle_tips, inputs=condition_input, outputs=tips_output)

# Launch the app
app.launch(share=True)